Step 1: Create a New Java Project
Let's assume you've created a new Java project named ProxyPatternExample.

Step 2: Define Subject Interface
Create an interface Image with a method display().

// Image.java
public interface Image {
    void display();
}

Step 3: Implement Real Subject Class
Create a class RealImage that implements Image and loads an image from a remote server.

// RealImage.java
public class RealImage implements Image {
    private String filename;

    public RealImage(String filename) {
        this.filename = filename;
        loadImageFromDisk();
    }

    private void loadImageFromDisk() {
        System.out.println("Loading " + filename + " from disk...");
        // Simulate loading from a remote server
        try {
            Thread.sleep(2000); // simulate time delay
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println(filename + " loaded.");
    }

    @Override
    public void display() {
        System.out.println("Displaying " + filename);
    }
}

Step 4: Implement Proxy Class
Create a class ProxyImage that implements Image and holds a reference to RealImage. Implement lazy initialization and caching in ProxyImage.

// ProxyImage.java
public class ProxyImage implements Image {
    private String filename;
    private RealImage realImage;

    public ProxyImage(String filename) {
        this.filename = filename;
    }

    @Override
    public void display() {
        if (realImage == null) {
            realImage = new RealImage(filename);
        }
        realImage.display();
    }
}

Step 5: Test the Proxy Implementation
Create a test class to demonstrate the use of ProxyImage to load and display images.

// ProxyPatternExample.java
public class ProxyPatternExample {
    public static void main(String[] args) {
        Image image1 = new ProxyImage("image1.jpg");
        Image image2 = new ProxyImage("image2.jpg");

        // Display image1
        System.out.println("Displaying image1:");
        image1.display(); // Loading from disk
        image1.display(); // Using cached image

        // Display image2
        System.out.println("Displaying image2:");
        image2.display(); // Loading from disk
        image2.display(); // Using cached image

        // Display image1 again
        System.out.println("Displaying image1 again:");
        image1.display(); // Using cached image
    }
}

When you run ProxyPatternExample, you should see output similar to:

Displaying image1:
Loading image1.jpg from disk...
image1.jpg loaded.
Displaying image1.jpg
Displaying image1.jpg
Displaying image2:
Loading image2.jpg from disk...
image2.jpg loaded.
Displaying image2.jpg
Displaying image2.jpg
Displaying image1 again:
Displaying image1.jpg

This confirms that the Proxy pattern is correctly implemented for lazy initialization and caching in an image viewer application.

