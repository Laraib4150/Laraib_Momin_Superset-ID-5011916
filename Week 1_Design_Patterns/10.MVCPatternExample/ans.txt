Step 1: Create a New Java Project
Let's assume you've created a new Java project named MVCPatternExample.

Step 2: Define Model Class
Create a class Student with attributes like name, id, and grade.

// Student.java
public class Student {
    private String id;
    private String name;
    private String grade;

    public Student(String id, String name, String grade) {
        this.id = id;
        this.name = name;
        this.grade = grade;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getGrade() {
        return grade;
    }

    public void setGrade(String grade) {
        this.grade = grade;
    }
}

Step 3: Define View Class
Create a class StudentView with a method displayStudentDetails().

// StudentView.java
public class StudentView {
    public void displayStudentDetails(String studentName, String studentId, String studentGrade) {
        System.out.println("Student Details:");
        System.out.println("Name: " + studentName);
        System.out.println("ID: " + studentId);
        System.out.println("Grade: " + studentGrade);
    }
}

Step 4: Define Controller Class
Create a class StudentController that handles the communication between the model and the view.

// StudentController.java
public class StudentController {
    private Student model;
    private StudentView view;

    public StudentController(Student model, StudentView view) {
        this.model = model;
        this.view = view;
    }

    public void setStudentName(String name) {
        model.setName(name);
    }

    public String getStudentName() {
        return model.getName();
    }

    public void setStudentId(String id) {
        model.setId(id);
    }

    public String getStudentId() {
        return model.getId();
    }

    public void setStudentGrade(String grade) {
        model.setGrade(grade);
    }

    public String getStudentGrade() {
        return model.getGrade();
    }

    public void updateView() {
        view.displayStudentDetails(model.getName(), model.getId(), model.getGrade());
    }
}

Step 5: Test the MVC Implementation
Create a main class to demonstrate creating a Student, updating its details using StudentController, and displaying them using StudentView.

// MVCPatternExample.java
public class MVCPatternExample {
    public static void main(String[] args) {
        // Create a student model
        Student model = new Student("1", "John Doe", "A");

        // Create a student view
        StudentView view = new StudentView();

        // Create a student controller
        StudentController controller = new StudentController(model, view);

        // Display initial student details
        controller.updateView();

        // Update student details
        controller.setStudentName("Jane Doe");
        controller.setStudentGrade("B+");

        // Display updated student details
        controller.updateView();
    }
}

When you run MVCPatternExample, you should see output similar to:

Output:
Student Details:
Name: John Doe
ID: 1
Grade: A
Student Details:
Name: Jane Doe
ID: 1
Grade: B+

This confirms that the MVC pattern is correctly implemented for managing student records.



