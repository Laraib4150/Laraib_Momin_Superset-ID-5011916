Step 1: Create a New Java Project
Let's assume you've created a new Java project named CommandPatternExample.

Step 2: Define Command Interface
Create an interface Command with a method execute().

// Command.java
public interface Command {
    void execute();
}

Step 3: Implement Concrete Commands
Create classes LightOnCommand and LightOffCommand that implement Command.


// LightOnCommand.java
public class LightOnCommand implements Command {
    private Light light;

    public LightOnCommand(Light light) {
        this.light = light;
    }

    @Override
    public void execute() {
        light.turnOn();
    }
}

// LightOffCommand.java
public class LightOffCommand implements Command {
    private Light light;

    public LightOffCommand(Light light) {
        this.light = light;
    }

    @Override
    public void execute() {
        light.turnOff();
    }
}

Step 4: Implement Invoker Class
Create a class RemoteControl that holds a reference to a Command and a method to execute the command.

// RemoteControl.java
public class RemoteControl {
    private Command command;

    public void setCommand(Command command) {
        this.command = command;
    }

    public void pressButton() {
        command.execute();
    }
}

Step 5: Implement Receiver Class
Create a class Light with methods to turn on and off.

// Light.java
public class Light {
    public void turnOn() {
        System.out.println("The light is on.");
    }

    public void turnOff() {
        System.out.println("The light is off.");
    }
}

Step 6: Test the Command Implementation
Create a test class to demonstrate issuing commands using the RemoteControl.

// CommandPatternExample.java
public class CommandPatternExample {
    public static void main(String[] args) {
        // Create a receiver
        Light livingRoomLight = new Light();

        // Create command objects
        Command lightOn = new LightOnCommand(livingRoomLight);
        Command lightOff = new LightOffCommand(livingRoomLight);

        // Create an invoker
        RemoteControl remote = new RemoteControl();

        // Turn on the light
        remote.setCommand(lightOn);
        remote.pressButton();

        // Turn off the light
        remote.setCommand(lightOff);
        remote.pressButton();
    }
}

When you run CommandPatternExample, you should see output similar to:

Output:
The light is on.
The light is off.

This confirms that the Command pattern is correctly implemented for issuing commands to turn devices on or off using a remote control.





