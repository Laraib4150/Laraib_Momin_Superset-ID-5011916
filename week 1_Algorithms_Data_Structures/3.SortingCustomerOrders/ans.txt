Step 1: Understand Sorting Algorithms

1.Bubble Sort
Description: Bubble Sort is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order. This process is repeated until the list is sorted.
Time Complexity:
    Best Case: O(n) (when the list is already sorted)
    Average Case: O(n^2)
    Worst Case: O(n^2)
Space Complexity: O(1) (in-place sorting)

2.Insertion Sort
Description: Insertion Sort builds the final sorted array one item at a time. It takes each element from the input and inserts it into its correct position in the already sorted part of the array.
Time Complexity:
    Best Case: O(n) (when the list is already sorted)
    Average Case: O(n^2)
    Worst Case: O(n^2)
Space Complexity: O(1) (in-place sorting)

3.Quick Sort
Description: Quick Sort is a divide-and-conquer algorithm that picks an element as a pivot and partitions the array around the pivot. It recursively applies the same process to the sub-arrays.
Time Complexity:
    Best Case: O(n log n)
    Average Case: O(n log n)
    Worst Case: O(n^2) (when the pivot is the smallest or largest element every time)
Space Complexity: O(log n) (due to recursive stack)

4.Merge Sort
Description: Merge Sort is also a divide-and-conquer algorithm. It divides the array into halves, recursively sorts them, and then merges the sorted halves to produce the sorted array.
Time Complexity:
    Best Case: O(n log n)
    Average Case: O(n log n)
    Worst Case: O(n log n)
Space Complexity: O(n) (due to extra space for merging)


Step 2: Setup
Create a class Order with attributes like orderId, customerName, and totalPrice.

// Order.java
public class Order {
    private String orderId;
    private String customerName;
    private double totalPrice;

    public Order(String orderId, String customerName, double totalPrice) {
        this.orderId = orderId;
        this.customerName = customerName;
        this.totalPrice = totalPrice;
    }

    public String getOrderId() {
        return orderId;
    }

    public String getCustomerName() {
        return customerName;
    }

    public double getTotalPrice() {
        return totalPrice;
    }

    @Override
    public String toString() {
        return "Order{" +
                "orderId='" + orderId + '\'' +
                ", customerName='" + customerName + '\'' +
                ", totalPrice=" + totalPrice +
                '}';
    }
}

Step 3: Implementation
Bubble Sort

// BubbleSort.java
public class BubbleSort {
    public static void sort(Order[] orders) {
        int n = orders.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (orders[j].getTotalPrice() > orders[j + 1].getTotalPrice()) {
                    // Swap orders[j] and orders[j + 1]
                    Order temp = orders[j];
                    orders[j] = orders[j + 1];
                    orders[j + 1] = temp;
                }
            }
        }
    }
}

Quick Sort
// QuickSort.java
public class QuickSort {
    public static void sort(Order[] orders, int low, int high) {
        if (low < high) {
            int pi = partition(orders, low, high);
            sort(orders, low, pi - 1);
            sort(orders, pi + 1, high);
        }
    }

    private static int partition(Order[] orders, int low, int high) {
        double pivot = orders[high].getTotalPrice();
        int i = (low - 1);
        for (int j = low; j < high; j++) {
            if (orders[j].getTotalPrice() <= pivot) {
                i++;
                // Swap orders[i] and orders[j]
                Order temp = orders[i];
                orders[i] = orders[j];
                orders[j] = temp;
            }
        }
        // Swap orders[i + 1] and orders[high]
        Order temp = orders[i + 1];
        orders[i + 1] = orders[high];
        orders[high] = temp;

        return i + 1;
    }
}

Step 4: Analysis
Performance Comparison

1.Bubble Sort:

Time Complexity:
    Best Case: O(n) (when the array is already sorted)
    Average Case: O(n^2)
    Worst Case: O(n^2)
Space Complexity: O(1)

2.Quick Sort:

Time Complexity:
    Best Case: O(n log n)
    Average Case: O(n log n)
    Worst Case: O(n^2) (rare with good pivot selection)
Space Complexity: O(log n) (due to recursive stack)


Ques.Why Quick Sort is Preferred Over Bubble Sort
    Efficiency: Quick Sort has a better average and best-case time complexity (O(n log n)) compared to Bubble Sort's O(n^2) in average and worst cases.
    Scalability: Quick Sort performs better on larger datasets due to its divide-and-conquer approach.
    Practicality: In practice, Quick Sort is faster for large arrays, even though its worst-case time complexity is O(n^2). Optimizations like choosing a good pivot can mitigate this.

Example Usage
// SortingOrders.java
public class SortingOrders {
    public static void main(String[] args) {
        Order[] orders = {
            new Order("1", "Alice", 120.50),
            new Order("2", "Bob", 95.00),
            new Order("3", "Charlie", 150.75),
            new Order("4", "David", 80.25)
        };

        // Bubble Sort
        BubbleSort.sort(orders);
        System.out.println("Bubble Sort Result:");
        for (Order order : orders) {
            System.out.println(order);
        }

        // Prepare data for Quick Sort
        Order[] ordersForQuickSort = {
            new Order("1", "Alice", 120.50),
            new Order("2", "Bob", 95.00),
            new Order("3", "Charlie", 150.75),
            new Order("4", "David", 80.25)
        };

        // Quick Sort
        QuickSort.sort(ordersForQuickSort, 0, ordersForQuickSort.length - 1);
        System.out.println("Quick Sort Result:");
        for (Order order : ordersForQuickSort) {
            System.out.println(order);
        }
    }
}

Output:
Bubble Sort Result:
Order{orderId='4', customerName='David', totalPrice=80.25}
Order{orderId='2', customerName='Bob', totalPrice=95.0}
Order{orderId='1', customerName='Alice', totalPrice=120.5}
Order{orderId='3', customerName='Charlie', totalPrice=150.75}
Quick Sort Result:
Order{orderId='4', customerName='David', totalPrice=80.25}
Order{orderId='2', customerName='Bob', totalPrice=95.0}
Order{orderId='1', customerName='Alice', totalPrice=120.5}
Order{orderId='3', customerName='Charlie', totalPrice=150.75}

This code provides a demonstration of sorting customer orders using Bubble Sort and Quick Sort, comparing the two sorting algorithms in practice.